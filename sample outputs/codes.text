from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from .models import AuditLog
from .forms import AuditLogForm
from django.http import HttpRequest
# Import the get_client_ip function
from .utils import get_client_ip

@login_required
def audit_log(request):
    audit_logs = AuditLog.objects.filter(user=request.user).order_by('-timestamp')
    form = AuditLogForm(request.POST or None)

    if request.method == 'POST' and form.is_valid():
        form.instance.user = request.user
        form.save()
        return redirect('audit:audit_log')

    context = {'audit_logs': audit_logs, 'form': form}
    return render(request, 'audit/audit_log.html', context)

@login_required
def audit_log_list(request):
    audit_logs = AuditLog.objects.filter(user=request.user).order_by('-timestamp')
    return render(request, 'audit/audit_log_list.html', {'audit_logs': audit_logs})

@login_required
def audit_log_detail(request, audit_log_id):
    audit_log = get_object_or_404(AuditLog, id=audit_log_id, user=request.user)
    return render(request, 'audit/audit_log_detail.html', {'audit_log': audit_log})

@login_required
def audit_log_create(request):
    if request.method == 'POST':
        form = AuditLogForm(request.POST)
        if form.is_valid():
            # Set the user and source_ip using the request object
            form.instance.user = request.user
            form.instance.source_ip = get_client_ip(request)
            form.save()
            return redirect('audit:audit_log_list')
    else:
        form = AuditLogForm()

    return render(request, 'audit/audit_log_form.html', {'form': form, 'action': 'Create'})

@login_required
def audit_log_update(request, audit_log_id):
    audit_log = get_object_or_404(AuditLog, id=audit_log_id, user=request.user)

    if request.method == 'POST':
        form = AuditLogForm(request.POST, instance=audit_log)
        if form.is_valid():
            form.instance.source_ip = get_client_ip(request)
            form.save()
            return redirect('audit:audit_log_list')
    else:
        form = AuditLogForm(instance=audit_log)

    return render(request, 'audit/audit_log_form.html', {'form': form, 'action': 'Update'})

@login_required
def audit_log_delete(request, audit_log_id):
    audit_log = get_object_or_404(AuditLog, id=audit_log_id, user=request.user)

    if request.method == 'POST':
        audit_log.delete()
        return redirect('audit:audit_log_list')

    return render(request, 'audit/audit_log_confirm_delete.html', {'audit_log': audit_log})

from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from audit.models import AuditLog
from organizational_info.models import InternalControl
from risk_assessment.models import RiskAssessment

# Update your dashboard view
import random

def index(request):
    """Render the index page."""
    return render(request, 'core/index.html')

def dashboard(request):
    # Chart 1: Bar Chart (Example: Number of Audit Logs per Action)
    audit_actions = [action[1] for action in AuditLog.AUDIT_ACTIONS]
    audit_counts = [AuditLog.objects.filter(action=action[0]).count() for action in AuditLog.AUDIT_ACTIONS]

    # Chart 2: Doughnut Chart (Example: Distribution of Internal Controls)
    internal_controls = InternalControl.objects.count()

    # Chart 3: Line Chart (Example: Timeline of Risk Assessments)
    risk_assessments = RiskAssessment.objects.order_by('timestamp')
    risk_dates = [str(assessment.timestamp.date()) for assessment in risk_assessments]
    
    # Generate random values for the line chart based on the total count of risks
    total_risks = RiskAssessment.objects.count()
    risk_counts = [random.randint(0, total_risks) for _ in range(len(risk_dates))]

    # Chart 4: Scatter Plot (Example: Impact vs. Likelihood)
    scatter_data = [{'x': random.uniform(0, 100), 'y': random.uniform(0, 100)} for _ in range(10)]

    context = {
        'audit_actions': audit_actions,
        'audit_counts': audit_counts,
        'internal_controls': internal_controls,
        'risk_dates': risk_dates,
        'risk_counts': risk_counts,
        'scatter_data': scatter_data,
    }

    return render(request, 'core/dashboard.html', context)

# organizational_info/views.py
from django.shortcuts import render, get_object_or_404, redirect
from .models import InternalControl, CorporateGovernance, AccountingProcess
from .forms import InternalControlForm, CorporateGovernanceForm, AccountingProcessForm

def internal_control_list(request):
    internal_controls = InternalControl.objects.all()
    return render(request, 'organizational_info/internal_control_list.html', {'internal_controls': internal_controls})

def internal_control_detail(request, pk):
    internal_control = get_object_or_404(InternalControl, pk=pk)
    return render(request, 'organizational_info/internal_control_detail.html', {'internal_control': internal_control})

def internal_control_new(request):
    if request.method == "POST":
        form = InternalControlForm(request.POST)
        if form.is_valid():
            internal_control = form.save(commit=False)
            internal_control.save()
            return redirect('organizational_info:internal_control_list')
    else:
        form = InternalControlForm()
    return render(request, 'organizational_info/internal_control_edit.html', {'form': form})

def internal_control_edit(request, pk):
    internal_control = get_object_or_404(InternalControl, pk=pk)
    if request.method == "POST":
        form = InternalControlForm(request.POST, instance=internal_control)
        if form.is_valid():
            internal_control = form.save(commit=False)
            internal_control.save()
            return redirect('organizational_info:internal_control_detail', pk=internal_control.pk)
    else:
        form = InternalControlForm(instance=internal_control)
    return render(request, 'organizational_info/internal_control_edit.html', {'form': form, 'internal_control': internal_control})

def internal_control_delete(request, pk):
    internal_control = get_object_or_404(InternalControl, pk=pk)
    internal_control.delete()
    return redirect('organizational_info:internal_control_list')

# Repeat similar views for Corporate Governance and Accounting Process

# risk_assessment/views.py
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from .models import RiskAssessment
from .forms import RiskAssessmentForm

@login_required
def risk_assessment_list(request):
    risk_assessments = RiskAssessment.objects.filter(user=request.user)
    return render(request, 'risk_assessment/risk_assessment_list.html', {'risk_assessments': risk_assessments})

@login_required
def risk_assessment_detail(request, pk):
    risk_assessment = RiskAssessment.objects.get(pk=pk)
    return render(request, 'risk_assessment/risk_assessment_detail.html', {'risk_assessment': risk_assessment})

@login_required
def risk_assessment_create(request):
    if request.method == 'POST':
        form = RiskAssessmentForm(request.POST)
        if form.is_valid():
            risk_assessment = form.save(commit=False)
            risk_assessment.user = request.user
            risk_assessment.save()
            return redirect('risk_assessment:risk_assessment_list')
    else:
        form = RiskAssessmentForm()
    return render(request, 'risk_assessment/risk_assessment_form.html', {'form': form})

@login_required
def risk_assessment_update(request, pk):
    risk_assessment = RiskAssessment.objects.get(pk=pk)
    if request.method == 'POST':
        form = RiskAssessmentForm(request.POST, instance=risk_assessment)
        if form.is_valid():
            form.save()
            return redirect('risk_assessment:risk_assessment_list')
    else:
        form = RiskAssessmentForm(instance=risk_assessment)
    return render(request, 'risk_assessment/risk_assessment_form.html', {'form': form})

@login_required
def risk_assessment_delete(request, pk):
    risk_assessment = RiskAssessment.objects.get(pk=pk)
    risk_assessment.delete()
    return redirect('risk_assessment:risk_assessment_list')
